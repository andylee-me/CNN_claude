name: Train Cat-Dog Classifier

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install kaggle gdown

    # 下載上一輪的 ckpt（若沒有則忽略）
    - name: Download last checkpoint (if any)
      uses: dawidd6/action-download-artifact@v6
      with:
        name: ckpt
        path: ckpt_in
        search_artifacts: true
        if_no_artifact_found: ignore
        branch: claude-resnet18-no-pre-test  # 依你的主要分支調整
        workflow_conclusion: completed


    - name: Build RESUME_ARG
      id: resume
      run: |
        if [ -f ckpt_in/checkpoint_latest.pth ]; then
          echo "resume=--resume ckpt_in/checkpoint_latest.pth" >> $GITHUB_OUTPUT
          echo "Found checkpoint_latest.pth, will resume."
        else
          echo "resume=" >> $GITHUB_OUTPUT
          echo "No checkpoint found, start fresh."
        fi

    # 選項2: 從 Google Drive 下載數據集 (備用選項)
    - name: Download dataset from Google Drive
      run: |
        echo "從 Google Drive 下載數據集..."
        gdown https://drive.google.com/uc?id=19QvyV00Zq6dwRY3hA8z_PyHB-naUUMB7 -O dataset.zip
        unzip dataset.zip -d file/
        echo "✅ 解壓完成，資料放在 file/ 資料夾內"
      if: env.KAGGLE_USERNAME == '' || env.KAGGLE_KEY == ''

    # 你現有的資料下載＆整理（略）

    - name: Verify dataset structure
      run: |
        echo "檢查數據集結構..."
        ls -la file/kaggle_cats_vs_dogs_f/ || true
        ls -la file/kaggle_cats_vs_dogs_f/train/ || true
        ls -la file/kaggle_cats_vs_dogs_f/val/ || true

    - name: Train model (auto-stop before 6h)
      run: |
        echo "開始訓練模型..."
        python train_model.py \
          --data-dir file/kaggle_cats_vs_dogs_f \
          --architecture resnet34 \
          --max-epochs 200 \
          --save-every 5 \
          --max-wall-min 330 \
          ${{ steps.resume.outputs.resume }}

    - name: Upload checkpoint for next run
      uses: actions/upload-artifact@v4
      with:
        name: ckpt
        path: |
          checkpoint_latest.pth
          checkpoint_epoch*.pth
          checkpoint_best.pth
          TRAINING_COMPLETE.txt
          NEED_MORE.txt
        retention-days: 14

    # 僅在最終模型存在時才做測試與釋出
    - name: Test model predictions (val)
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      run: |
        echo "測試模型預測（val）..."
        mkdir -p test_images
        cp file/kaggle_cats_vs_dogs_f/val/cat/*.jpg test_images/ 2>/dev/null || true
        cp file/kaggle_cats_vs_dogs_f/val/dog/*.jpg test_images/ 2>/dev/null || true
        python predict.py --model best_cat_dog_model.pth --folder test_images/

  

    - name: Test model's train predictions
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      run: |
        echo "測試模型預測..."
        # 創建測試圖片目錄
        mkdir -p test_images
        
        # 複製一些驗證圖片用於測試
        cp file/kaggle_cats_vs_dogs_f/train/cat/*.jpg test_images/ 2>/dev/null || true
        cp file/kaggle_cats_vs_dogs_f/train/dog/*.jpg test_images/ 2>/dev/null || true
        
        # 進行批次預測測試
        python predict_train.py --model best_cat_dog_model.pth --folder test_images/
        

    - name: Upload trained model
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: trained-cat-dog-model
        path: |
          best_cat_dog_model.pth
          overfit_training_curves.png
        retention-days: 30
